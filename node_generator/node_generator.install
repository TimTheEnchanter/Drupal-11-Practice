<?php

use Drupal\node\Entity\NodeType;
use Drush\Commands\DrushCommands;
use Drupal\Core\Drush\DrushCommands;

function node_generator_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    // Check if the 'field' module is enabled.
    if (!\Drupal::moduleHandler()->moduleExists('field')) {
      $requirements['node_generator_field_dependency'] = [
        'title' => t('Node Generator: Field Dependency'),
        'value' => t('The Field module is required for Node Generator.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    // Check if a specific contributed module is enabled.
    if (!\Drupal::moduleHandler()->moduleExists('token')) {
      $requirements['node_generator_token_dependency'] = [
        'title' => t('Node Generator: Token Dependency'),
        'value' => t('The Token module is recommended for full functionality of Node Generator.'),
        'severity' => REQUIREMENT_WARNING,
      ];
    }
  }

  return $requirements;
}

function node_generator_install() {
  // Check if Drush is available.
  /*if (drush_version()) {
    // Check if the custom Drush command exists.
    $command_info = drush_command('node_generator:install-dependencies');
    if ($command_info) {
      // Attempt to run the Drush command.
      drush_invoke_process('@self', 'node_generator:install-dependencies');
    } else {
      \Drupal::messenger()->addWarning(t('Custom Drush command `node_generator:install-dependencies` not found. Please ensure it is correctly defined.'));
    }
  } else {
    \Drupal::messenger()->addWarning(t('Drush is not available. Could not automatically install dependencies. Please run the command manually: `drush node_generator:install-dependencies`'));
  }*/

  // Create content types.
  node_generator_create_content_types();
}

function node_generator_create_content_types() {
  // Define the properties for your first content type.
  $contentType1 = NodeType::create([
    'type' => 'your_content_type_one',
    'name' => 'Your Content Type One',
    'label' => 'Your Content Type One',
    'description' => 'This is the first content type created by Your Module.',
    'display_submitted' => FALSE,
  ]);
  $contentType1->save();

  \Drupal::messenger()->addMessage(t('Content type %type created.', ['%type' => $contentType1->label()]));

  // Define the properties for your second content type.
  $contentType2 = NodeType::create([
    'type' => 'your_content_type_two',
    'name' => 'Your Content Type Two',
    'label' => 'Your Content Type Two',
    'description' => 'This is the second content type created by Your Module.',
    'display_submitted' => TRUE,
  ]);
  $contentType2->save();

  \Drupal::messenger()->addMessage(t('Content type %type created.', ['%type' => $contentType2->label()]));

  // You can add more content type creation logic here.
}