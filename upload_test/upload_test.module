<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;

function upload_test_node_insert(Node $node) {

    if ($node->bundle() === 'valkyrie_upload') {
    $submitted_values = $node;

    // Do something with the form data.  For example, log it.
    //\Drupal::logger('upload_test')->notice('Form data: @data', [
    //    '@data' => print_r($node, TRUE),
    //]);

    
    $csv_fid = '';
    //$csv_file_content_summary = '';
    if ($node->hasField('field_valkyrie_anomalies_file') && !$node->get('field_valkyrie_anomalies_file')->isEmpty()) {
        $csv_fid = $node->get('field_valkyrie_anomalies_file')->target_id;
    }

    $image_fids = '';
    if ($node->hasField('field_patrol_photos') && !$node->get('field_patrol_photos')->isEmpty()) {
        $image_fids = $node->get('field_patrol_photos')->target_id;
    }

    //dd($image_fids);
    
    

    \Drupal::logger('upload_test')->info('Form data received in hook:
        CSV File ID: @csv_id
        Image File IDs: @image_ids', [
        '@csv_id' => $csv_fid,
        '@image_ids' => $image_fids,
    ]);  

        //dd($csv_fid);
        if ($csv_fid) {
            $csv_file = File::load($csv_fid);
            if (!$csv_file) {
                \Drupal::messenger()->addError(t('Failed to load the CSV file.'));
                return;
            }

            // Process the CSV file (example: read the first line).
            $csv_uri = $csv_file->getFileUri();
            $handle = fopen($csv_uri, 'r');
            $csv_data = [];
            if ($handle) {
                $csv_data = fgetcsv($handle); // Get the first line of the CSV.
                fclose($handle);
                if ($csv_data) {
                    \Drupal::messenger()->addMessage(t('First line of CSV: @data', ['@data' => implode(', ', $csv_data)]));
                }
            }
            else {
                \Drupal::messenger()->addError(t('Could not open the csv file.'));
                return;
            }

            $handle = fopen($csv_uri, 'r');
            //dd($handle);
            $header = fgetcsv($handle); // Get the header row.
            if ($header === FALSE) {
                \Drupal::messenger()->addError(t('Could not read the CSV header.'));
                fclose($handle);
                return;
            }
        }


        if (!empty($image_fids)) {
            $image_uris = [];
            $images_data = [];
            // Load and process the image files.
            foreach ($image_fids as $image_fid) {
                $image_file = File::load($image_fid);
                if ($image_file) {
                    $image_uri = $image_file->getFileUri();
                    $image_uris[] = $image_uri;
                    $images_data[] = [
                    'uri' => $image_uri,
                    'alt' => $image_file->getFilename(), // You might want a separate field for alt text.
                    ];
                }
            }
            if (count($image_uris) > 0) {
                \Drupal::messenger()->addMessage(t('Uploaded images: @images', ['@images' => implode(', ', $image_uris)]));
            }
        }


        //$node = Node::create([
        //'type' => 'valkyrie_upload',
        //'field_csv_data' => serialize($csv_data), // Store the CSV data.  Consider creating a dedicated field.
        //'field_image_files' => $images_data, // Store the image file information.  Adjust field name as needed.
        //]);


        //$node->save();

        // Set a success message.
        //\Drupal::messenger()->addMessage(t('Node created successfully.'));

        //$this->loggerFactory->get('upload_test')->notice('Node created');


        //Please actually work
        $nodes_created = 0;
        while (($row = fgetcsv($handle)) !== FALSE) {
        // Combine header and row data.
        $data = array_combine($header, $row);
        if ($data) {
            // Create a new node for each row.
            $anomaly_location = $data['lat'].", ".$data['lon'];
            $anomaly_status = $data['status'];
            $anomaly_type = $data['type'];

            $anomaly_node = Node::create([
            'title' => 'Test',
            'type' => 'anomaly',
            'field_anomaly_location' => $anomaly_location,
            'field_qc_status' => $anomaly_status,
            'field_anomaly_type' => $anomaly_type,
            
            ]);

            // Save the node.
            $anomaly_node->save();

            $anomaly_history_date = $data['anomDate'];
            $anomaly_history_photos = $data['pics'];

            $anomaly_history_node = Node::create([
            'title' => 'Sub Test',
            'type' => 'anomaly_history',
            'field_anomaly' => $anomaly_node,
            'field_date' => $anomaly_history_date,
            'field_patrol_photos' => $anomaly_history_photos,
            
            ]);

            // Save the node.
            $anomaly_history_node->save();

            $nodes_created++;
        }
        }
        fclose($handle);


        \Drupal::messenger()->addMessage(t('@count nodes created successfully.', ['@count' => $nodes_created]));

        \Drupal::logger('upload_test')->notice('@count nodes created from CSV.', ['@count' => $nodes_created]);
        // Redirect to the node's view page.
        //$form_state->setRedirect('entity.node.canonical', ['node' => $node->id()]); 
        $url = Url::fromUri('https://airs4james.synergyaviation.ca/node/add/valkyrie_upload');

        return new RedirectResponse($url->toString());
    }
}