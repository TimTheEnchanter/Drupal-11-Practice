<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Field\EntityReferenceFieldItemList;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

function upload_test_node_insert(Node $node) {

    if ($node->bundle() === 'valkyrie_upload') {
    $submitted_values = $node;

    
    $csv_fid = '';
    
    if ($node->hasField('field_valkyrie_anomalies_file') && !$node->get('field_valkyrie_anomalies_file')->isEmpty()) {
        $csv_fid = $node->get('field_valkyrie_anomalies_file')->target_id;
    }

    $image_fids = [];
    if ($node->hasField('field_patrol_photographs') && !$node->get('field_patrol_photographs')->isEmpty()) {

        $entityReferenceField = $node->get('field_patrol_photographs');

        foreach ($entityReferenceField as $item) {
            $media_entity = $item->entity;
            $file_item = $media_entity->get('field_media_image')->first();

            if ($file_item) {
                
                $file_entity = $file_item->entity; // Get the referenced File entity

                if ($file_entity) {
                  $file_id = $file_entity->id();
                  $full_filename = $file_entity->getFilename();

                  $extracted_part = '';

                  if($full_filename)
                  {
                    $last_zero_pos = strrpos($full_filename, '0'); // Find the last '0'
                    $dot_pos = strrpos($full_filename, '.'); // Find the last '.' (for the extension)

                    // Ensure both characters are found and '0' is before '.'
                    if ($last_zero_pos !== false && $dot_pos !== false && $last_zero_pos < $dot_pos) {
                        // Extract the substring between the last '0' and the '.'
                        $extracted_part = substr($full_filename, $last_zero_pos + 1, $dot_pos - ($last_zero_pos + 1));
                    }
                  }
                  else{
                    $extracted_part = "";
                  }
                  

                  $image_fids[] = [
                    'id' => $file_id,
                    'filename' => $extracted_part,
                  ];
                }
            }
            
        }
      
        

    }

    

    \Drupal::logger('upload_test')->info('Form data received in hook:
        CSV File ID: @csv_id
        Image File IDs: @image_ids', [
        '@csv_id' => $csv_fid,
        '@image_ids' => $image_fids,
    ]);  

        if ($csv_fid) {
            $csv_file = File::load($csv_fid);
            if (!$csv_file) {
                \Drupal::messenger()->addError(t('Failed to load the CSV file.'));
                return;
            }

            // Process the CSV file (example: read the first line).
            $csv_uri = $csv_file->getFileUri();
            $handle = fopen($csv_uri, 'r');
            $csv_data = [];
            if ($handle) {
                $csv_data = fgetcsv($handle); // Get the first line of the CSV.
                fclose($handle);
                if ($csv_data) {
                    \Drupal::messenger()->addMessage(t('First line of CSV: @data', ['@data' => implode(', ', $csv_data)]));
                }
            }
            else {
                \Drupal::messenger()->addError(t('Could not open the csv file.'));
                return;
            }

            $handle = fopen($csv_uri, 'r');
            //dd($handle);
            $header = fgetcsv($handle); // Get the header row.
            if ($header === FALSE) {
                \Drupal::messenger()->addError(t('Could not read the CSV header.'));
                fclose($handle);
                return;
            }
        }


        /*if (!empty($image_fids)) {
            $image_uris = [];
            $images_data = [];
            // Load and process the image files.
            foreach ($image_fids as $image_fid) {
                $image_file = File::load($image_fid);
                if ($image_file) {
                    $image_uri = $image_file->getFileUri();
                    $image_uris[] = $image_uri;
                    $images_data[] = [
                    'uri' => $image_uri,
                    'alt' => $image_file->getFilename(), // You might want a separate field for alt text.
                    ];
                }
            }
            if (count($image_uris) > 0) {
                \Drupal::messenger()->addMessage(t('Uploaded images: @images', ['@images' => implode(', ', $image_uris)]));
            }
        }*/



        //Please actually work
        $nodes_created = 0;
        while (($row = fgetcsv($handle)) !== FALSE) {
        // Combine header and row data.
            $data = array_combine($header, $row);
            if ($data) {

                $photo_array = [];
                //$cleaned_array = [];
                $csv_photo_array = $data['pics'];
                $cleaned_csv_photo_array = [];
                $cleaned_csv_direction_array = [];


                $cleaned_string1 = trim($csv_photo_array, '[]'); // Removes leading/trailing [ and ]
                // Result: "1w","2w"
                $cleaned_string1 = str_replace('"', '', $cleaned_string1); // Removes all double quotes
                // Result: 1w,2w
                $cleaned_array = explode(',', $cleaned_string1);
                //dump($cleaned_array);

                foreach($cleaned_array as $clean)
                {
                    //dump($clean);
                    $photo_array[] = $clean;
                }

                 

                //dump($photo_array);

                foreach ($photo_array as $item) {
                    //dump("Test1 ".$item);
                    $cleaned_item = preg_replace('/[^0-9]/', '', $item); // Keep only digits
                    //dump("Test2 ".$cleaned_item);
                    //print_r($cleaned_item,TRUE);
                    $cleaned_csv_direction_array[] = preg_replace('/[a-zA-Z]/', '', $item);
                    $cleaned_csv_photo_array[] = (int)$cleaned_item;
                }

                $media_id_matches = [];

                //dump($image_fids);
                //dump($cleaned_csv_photo_array);

                foreach ($image_fids as $image_id) {
                    if (in_array($image_id['filename'], $cleaned_csv_photo_array)) {
                        $media_id_matches[] = $image_id['id'];
                    }
                }

                //dump($media_id_matches);

                // Create a new node for each row.

                if($data['anomID'] == "new")
                {
                    
                    $query = \Drupal::entityQuery('node')->accessCheck(FALSE)->condition('title', $data['anomID'])->execute();


                    if (!empty($query)) {

                        $found_nid = reset($query);

                        $anomaly_history_date = $data['anomDate'];
                        $anomaly_history_photos = $data['pics'];

                        $anomaly_history_node = Node::create([
                        //'title' => $data['anomID'].' Anomaly History',
                        'type' => 'anomaly_history',
                        'field_anomaly' => $found_nid,
                        'field_date' => $anomaly_history_date,
                        'field_patrol_photos' => $media_id_matches,
                        
                        ]);

                        // Save the node.
                        $anomaly_history_node->save();     
                        $nodes_created++;
                    }
                }
                else{
                    $anomaly_location = $data['lat'].", ".$data['lon'];
                    $anomaly_status = $data['status'];
                    $anomaly_type = $data['type'];
                    $anomaly_notes = $data['notes'];
                    $lat = $data['lat'];
                    $long = $data['lon'];

                    //$image_fids

                    $anomaly_node = Node::create([
                    'type' => 'anomaly',
                    'field_anomaly_location' => 'POINT ('.$lat.' '.$long.')',
                    'field_anomaly_position' => 'on_site',
                    'field_anomaly_status' => 'active',
                    'field_anomaly_type' => '',
                    'field_directions' => $cleaned_csv_direction_array,
                    'field_anomaly_location' => $anomaly_location,
                    'field_notes' => $anomaly_notes,
                    ]);

                    // Save the node.
                    $anomaly_node->save();
                    $nodes_created++;

                    $anomaly_history_date = $data['anomDate'];
                    $anomaly_history_photos = $data['pics'];

                    $anomaly_history_node = Node::create([
                    'type' => 'anomaly_history',
                    'field_anomaly' => $anomaly_node,
                    'field_date' => $anomaly_history_date,
                    'field_patrol_photos' => $media_id_matches,
                    
                    ]);

                    // Save the node.
                    $anomaly_history_node->save();
                    $nodes_created++;
                }

                
            }
        }
        fclose($handle);

        //dd();
        \Drupal::messenger()->addMessage(t('@count nodes created successfully.', ['@count' => $nodes_created]));

        \Drupal::logger('upload_test')->notice('@count nodes created from CSV.', ['@count' => $nodes_created]);

        // Redirect to the node's view page.
        //$url = Url::fromUri('https://airs4james.synergyaviation.ca/node/add/valkyrie_upload');

        //return new RedirectResponse($url->toString());
    }
}