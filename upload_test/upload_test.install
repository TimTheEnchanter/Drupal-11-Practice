<?php

use Drupal\node\Entity\NodeType;



function upload_test_install() {
  // Check if Drush is available.

  // Create content types.
  upload_test_create_content_types();
}

function upload_test_create_content_types() {
  // Define the properties for your first content type.

  if (NodeType::load('anomaly')) {

  }
  else{

      $content_type_id = 'anomaly';

      $anomaly = NodeType::create([
        'type' => 'anomaly',
        'name' => 'Anomaly',
        'label' => 'Anomaly',
        'description' => 'Any unusual findings of a surveillance field during a patrol.',
        'display_submitted' => FALSE,
      ]);
      $anomaly->save();

      \Drupal::messenger()->addMessage(t('Content type %type created.', ['%type' => $anomaly->label()]));

      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_anomaly_grid',
        'entity_type' => 'node',
        'type' => 'text',
        
      ]);
      $field_storage->save();

      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'anomaly',
        'label' => 'Anomaly Grid',
        'settings' => [
          'display_summary' => FALSE,
        ],
        'form_display_options' => [
          'type' => 'text_textfield',
          'weight' => 0,
        ],
        'display_options' => [
          'label' => 'above',
          'type' => 'string',
          'weight' => 0,
        ],
      ]);
      $field->save();

      ////////




      ///////

      $list_field_name = 'field_anomaly_position';
      if (!FieldStorageConfig::loadByName('node', $list_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $list_field_name,
          'entity_type' => 'node',
          'type' => 'list_string', // Use 'list_string' for List (text).
          'settings' => [
            'allowed_values' => [
              'beside_row' => 'Beside ROW',
              'on_row' => 'On ROW',
              'on_site' => 'On Site',
            ],
          ],
          'cardinality' => 1, // Single selection from the list. Use FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED for multiple.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Anomaly Position'),
          //'description' => t('The current status of the item.'),
          'required' => TRUE,
          'form_display_options' => [
            'type' => 'options_select', // Widget for a single select list. Use 'options_buttons' for radio buttons.
            'weight' => 3,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'list_default', // Default formatter for list fields.
            'weight' => 3,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $list_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $list_field_name]));
      }

      ///////

      $list_field_name = 'field_anomaly_status';
      if (!FieldStorageConfig::loadByName('node', $list_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $list_field_name,
          'entity_type' => 'node',
          'type' => 'list_string', // Use 'list_string' for List (text).
          'settings' => [
            'allowed_values' => [
              'active' => 'Active',
              'inactive' => 'Inactive',
              
            ],
          ],
          'cardinality' => 1, // Single selection from the list. Use FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED for multiple.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Anomaly Status'),
          //'description' => t('The current status of the item.'),
          'required' => TRUE,
          'form_display_options' => [
            'type' => 'options_select', // Widget for a single select list. Use 'options_buttons' for radio buttons.
            'weight' => 3,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'list_default', // Default formatter for list fields.
            'weight' => 3,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $list_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $list_field_name]));
      }

      ////////

      $list_field_name = 'field_anomaly_type';
      if (!FieldStorageConfig::loadByName('node', $list_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $list_field_name,
          'entity_type' => 'node',
          'type' => 'list_string', // Use 'list_string' for List (text).
          'settings' => [
            'allowed_values' => [
              '3rd_party_activity' => '3rd Party Activity',
              'abnormal_heat_signature' => 'Abnormal Heat Signature',
              'berm' => 'Berm',
              'brushing_clearing' => 'Brushing/Clearing',
              'construction' => 'Construction',
              'crew_working' => 'Crew Working',
              'erosion' => 'Erosion',
              'erosion_mitigation' => 'Erosion Mitigation',
              'excavation' => 'Excavation',
              'exposed_pipe' => 'Exposed Pipe',
              'fire_near_right_of_way' => 'Fire Near Right of Way',
              'gld_spike' => 'GLD Spike',
              'ground_disturbance' => 'Ground Disturbance',
              'lidar_photogrammetry' => 'Lidar/Photogrammetry',
              'melting' => 'Melting',
              'other' => 'Other',
              'requested_photo' => 'Requested Photo',
              'rig' => 'Rig',
              'risk_slope' => 'Risk Slope',
              'signage_rail' => 'Signage Rail',
              'signage_road' => 'Signage Road',
              'sinkhole' => 'Sinkhole',
              'slumping' => 'Slumping',
              'structure' => 'Structure',
              'survey_stakes' => 'Survey Stakes',
              'vegetation' => 'Vegetation',
              'water_crossing' => 'Water Crossing',
              'water_crossing_signs_missing' => 'Water Crossing - Signs Missing',
              
            ],
          ],
          'cardinality' => 1, // Single selection from the list. Use FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED for multiple.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Anomaly Type'),
          //'description' => t('The current status of the item.'),
          'required' => TRUE,
          'form_display_options' => [
            'type' => 'options_select', // Widget for a single select list. Use 'options_buttons' for radio buttons.
            'weight' => 3,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'list_default', // Default formatter for list fields.
            'weight' => 3,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $list_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $list_field_name]));
      }


      $link_field_name = 'field_directions';
      if (!FieldStorageConfig::loadByName('node', $link_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $link_field_name,
          'entity_type' => 'node',
          'type' => 'link', // Use 'link' for Link fields.
          'settings' => [
            'link_type' => \Drupal\link\Plugin\Field\FieldType\LinkItem::LINK_GENERIC, // Allow internal and external links.
            'title_setting' => \Drupal\link\Plugin\Field\FieldType\LinkItem::TITLE_OPTIONAL, // Allow optional link text.
          ],
          'cardinality' => 1, // Single link. Use FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED for multiple.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Directions'),
          //'description' => t('A link to an external resource.'),
          'required' => FALSE,
          'form_display_options' => [
            'type' => 'link_default', // Standard widget for link fields.
            'weight' => 5,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'link', // Default formatter for link fields.
            'weight' => 5,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $link_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $link_field_name]));
      }


      $entity_ref_field_name = 'field_geometry_segment';
      $target_entity_type = 'Content';
      $target_bundle = 'Surveillance Geometry';

      if (!FieldStorageConfig::loadByName('node', $entity_ref_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $entity_ref_field_name,
          'entity_type' => 'node',
          'type' => 'entity_reference', // Use 'entity_reference' for entity reference fields.
          'settings' => [
            'target_type' => $target_entity_type, // e.g., 'user', 'taxonomy_term', 'node', 'media'
          ],
          'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED, // Can reference multiple categories.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Geometry Segment'),
          //'description' => t('Reference to a taxonomy term for categorization.'),
          'required' => FALSE,
          'settings' => [
            'handler' => 'default:taxonomy_term', // Handler for taxonomy terms.
            'handler_settings' => [
              'target_bundles' => [$target_bundle => $target_bundle], // Limit to specific vocabulary.
              'auto_create' => FALSE, // Set to TRUE to allow users to create new terms.
            ],
          ],
          'form_display_options' => [
            'type' => 'entity_reference_autocomplete', // Autocomplete widget.
            'weight' => 4,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'entity_reference_label', // Displays the label of the referenced entity.
            'weight' => 4,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $entity_ref_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $entity_ref_field_name]));
      }


      ///////


      $list_field_name = 'field_qc_status';
      if (!FieldStorageConfig::loadByName('node', $list_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $list_field_name,
          'entity_type' => 'node',
          'type' => 'list_string', // Use 'list_string' for List (text).
          'settings' => [
            'allowed_values' => [
              'invoice_sent' => 'Invoice Sent',
              'invoice_awaiting_approval' => 'Invoice Awaiting Approval',
              'needs_review' => 'Needs Review',
              'passed_qc' => 'Passed QC',
              'ready_for_invoicing' => 'Ready For Invoicing',
              'ready_for_qc' => 'Ready For QC',
              'requires_correction' => 'Requires Correction',
            ],
          ],
          'cardinality' => 1, // Single selection from the list. Use FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED for multiple.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('QC Status'),
          'description' => t('The current status of the item.'),
          'required' => TRUE,
          'form_display_options' => [
            'type' => 'options_select', // Widget for a single select list. Use 'options_buttons' for radio buttons.
            'weight' => 3,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'list_default', // Default formatter for list fields.
            'weight' => 3,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $list_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $list_field_name]));
      }
  }
  

  if (NodeType::load('anomaly_history')) {

  }
  else{

      $content_type_id = 'anomaly_history';

      $anomaly_history = NodeType::create([
        'type' => 'anomaly_history',
        'name' => 'Anomaly History',
        'label' => 'Anomaly History',
        'description' => 'A collection of the history of all anomalies, including newly found as well as any changes sighted.',
        'display_submitted' => FALSE,
      ]);
      $anomaly_history->save();

      \Drupal::messenger()->addMessage(t('Content type %type created.', ['%type' => $anomaly_history->label()]));

      $entity_ref_field_name = 'field_anomaly';
      // You'll need to know the target entity type (e.g., 'taxonomy_term')
      // and the target bundle (e.g., 'tags' vocabulary machine name).
      $target_entity_type = 'Content';
      $target_bundle = 'Anomaly'; // Replace with the machine name of your target vocabulary or content type.

      if (!FieldStorageConfig::loadByName('node', $entity_ref_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $entity_ref_field_name,
          'entity_type' => 'node',
          'type' => 'entity_reference', // Use 'entity_reference' for entity reference fields.
          'settings' => [
            'target_type' => $target_entity_type, // e.g., 'user', 'taxonomy_term', 'node', 'media'
          ],
          'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED, // Can reference multiple categories.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Anomaly'),
          //'description' => t('Reference to a taxonomy term for categorization.'),
          'required' => FALSE,
          'settings' => [
            'handler' => 'default:taxonomy_term', // Handler for taxonomy terms.
            'handler_settings' => [
              'target_bundles' => [$target_bundle => $target_bundle], // Limit to specific vocabulary.
              'auto_create' => FALSE, // Set to TRUE to allow users to create new terms.
            ],
          ],
          'form_display_options' => [
            'type' => 'entity_reference_autocomplete', // Autocomplete widget.
            'weight' => 4,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'entity_reference_label', // Displays the label of the referenced entity.
            'weight' => 4,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $entity_ref_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $entity_ref_field_name]));
      }


      $field_storage = FieldStorageConfig::create([
        'field_name' => 'body',
        'entity_type' => 'node',
        'type' => 'text',
        
      ]);
      $field_storage->save();

      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'anomaly_history',
        'label' => 'Body',
        'settings' => [
          'display_summary' => FALSE,
        ],
        'form_display_options' => [
          'type' => 'text_textfield',
          'weight' => 0,
        ],
        'display_options' => [
          'label' => 'above',
          'type' => 'string',
          'weight' => 0,
        ],
      ]);
      $field->save();


      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_date',
        'entity_type' => 'node',
        'type' => 'datetime', // Use 'datetime' type for date and time.
        'settings' => [
          'datetime_type' => 'date', // 'date' for date only, 'datetime' for date and time.
        ],
        'cardinality' => 1, // Single date.
      ]);
      $field_storage->save();

      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'anomaly_history',
        'label' => 'Date',
        'form_display_options' => [
          'type' => 'datetime_default', // Standard widget for date/time.
          'weight' => 2,
        ],
        'display_options' => [
          'label' => 'above',
          'type' => 'datetime_default', // Default formatter for date/time.
          'settings' => [
            'format_type' => 'medium', // Use a defined date format.
          ],
          'weight' => 2,
        ],
      ]);
      $field->save();


      $images_field_name = 'field_patrol_photos';
      if (!FieldStorageConfig::loadByName('node', $images_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $images_field_name,
          'entity_type' => 'node',
          'type' => 'image', // Use 'image' type for image-specific features.
          'settings' => [
            'target_type' => 'file',
            'display_field' => FALSE,
            'display_default' => FALSE,
            'uri_scheme' => 'public', // Or 'private'.
            'file_extensions' => 'png jpg jpeg gif', // Allowed image extensions.
            'alt_field' => TRUE, // Allow alt text for images.
            'alt_field_required' => FALSE,
            'title_field' => FALSE, // Optional: allow title text.
            'title_field_required' => FALSE,
          ],
          'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED, // Allow multiple images.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Associated Images'),
          'description' => t('Upload one or more images related to the data.'),
          'required' => FALSE, // Images can be optional.
          'form_display_options' => [
            'type' => 'image_image', // Standard widget for image uploads.
            'weight' => 1,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'image', // Default formatter for images.
            'settings' => [
              'image_style' => 'medium', // Use a defined image style.
              'image_link' => '', // Link to file, content, or nothing.
            ],
            'weight' => 1,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $images_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $images_field_name]));
      }


      $list_field_name = 'field_qc_status';
      if (!FieldStorageConfig::loadByName('node', $list_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $list_field_name,
          'entity_type' => 'node',
          'type' => 'list_string', // Use 'list_string' for List (text).
          'settings' => [
            'allowed_values' => [
              'invoice_sent' => 'Invoice Sent',
              'invoice_awaiting_approval' => 'Invoice Awaiting Approval',
              'needs_review' => 'Needs Review',
              'passed_qc' => 'Passed QC',
              'ready_for_invoicing' => 'Ready For Invoicing',
              'ready_for_qc' => 'Ready For QC',
              'requires_correction' => 'Requires Correction',
            ],
          ],
          'cardinality' => 1, // Single selection from the list. Use FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED for multiple.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('QC Status'),
          'description' => t('The current status of the item.'),
          'required' => TRUE,
          'form_display_options' => [
            'type' => 'options_select', // Widget for a single select list. Use 'options_buttons' for radio buttons.
            'weight' => 3,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'list_default', // Default formatter for list fields.
            'weight' => 3,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $list_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $list_field_name]));
      }
  }
  






  if (NodeType::load('valkyrie_upload')) {

  }
  else{

      $content_type_id = 'valkyrie_upload';

      $valkyrie_upload = NodeType::create([
        'type' => 'valkyrie_upload',
        'name' => 'Valkyrie Upload',
        'label' => 'Valkyrie Upload',
        'description' => 'Comprised of a CSV and an array of photos from Valkyrie uploaded by crews that inform the patrol report.',
        'display_submitted' => FALSE,
      ]);
      $valkyrie_upload->save();

      \Drupal::messenger()->addMessage(t('Content type %type created.', ['%type' => $valkyrie_upload->label()]));

      $csv_field_name = 'field_valkyrie_anomalies_file';
      if (!FieldStorageConfig::loadByName('node', $csv_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $csv_field_name,
          'entity_type' => 'node',
          'type' => 'file', // Use 'file' type for CSV.
          'settings' => [
            'target_type' => 'file',
            'display_field' => FALSE, // Don't display the file name/link by default.
            'display_default' => FALSE,
            'uri_scheme' => 'public', // Or 'private' if you prefer private files.
            'file_extensions' => 'csv', // Only allow CSV files.
          ],
          'cardinality' => 1, // Single CSV file.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('CSV Data File'),
          'description' => t('Upload the CSV file containing the data.'),
          'required' => TRUE,
          'form_display_options' => [
            'type' => 'file_generic', // Standard widget for file uploads.
            'weight' => 0,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'file_default', // Default formatter for files.
            'weight' => 0,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $csv_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $csv_field_name]));
      }

      $images_field_name = 'field_patrol_photos';
      if (!FieldStorageConfig::loadByName('node', $images_field_name)) {
        $field_storage = FieldStorageConfig::create([
          'field_name' => $images_field_name,
          'entity_type' => 'node',
          'type' => 'image', // Use 'image' type for image-specific features.
          'settings' => [
            'target_type' => 'file',
            'display_field' => FALSE,
            'display_default' => FALSE,
            'uri_scheme' => 'public', // Or 'private'.
            'file_extensions' => 'png jpg jpeg gif', // Allowed image extensions.
            'alt_field' => TRUE, // Allow alt text for images.
            'alt_field_required' => FALSE,
            'title_field' => FALSE, // Optional: allow title text.
            'title_field_required' => FALSE,
            // 'max_resolution' => '1024x768', // Optional: Max resolution.
            // 'min_resolution' => '100x100', // Optional: Min resolution.
            // 'max_filesize' => '2MB', // Optional: Max file size.
          ],
          'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED, // Allow multiple images.
        ]);
        $field_storage->save();

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $content_type_id,
          'label' => t('Associated Images'),
          'description' => t('Upload one or more images related to the data.'),
          'required' => FALSE, // Images can be optional.
          'form_display_options' => [
            'type' => 'image_image', // Standard widget for image uploads.
            'weight' => 1,
          ],
          'display_options' => [
            'label' => 'above',
            'type' => 'image', // Default formatter for images.
            'settings' => [
              'image_style' => 'medium', // Use a defined image style.
              'image_link' => '', // Link to file, content, or nothing.
            ],
            'weight' => 1,
          ],
        ]);
        $field->save();
        \Drupal::messenger()->addStatus(t('Field @field_name created for @content_type.', ['@field_name' => $images_field_name, '@content_type' => $content_type_name]));
      } else {
        \Drupal::messenger()->addWarning(t('Field @field_name already exists. Skipping creation.', ['@field_name' => $images_field_name]));
      }
  }
 
  // You can add more content type creation logic here.
}